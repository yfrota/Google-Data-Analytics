#intalando os pacotes 'tidyverse', e 'sqldf' 
install.packages("tidyverse")
install.packages("sqldf")
library(readr)
library(tidyverse)
library(sqldf)


##para tirar a interseção das tabelas nas quais estamos querendo confirmar se possuem os mesmos registros.


#IMPORTANDO OS DADOS 
sleepDay_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/sleepDay_merged.csv")
weightLogInfo_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/weightLogInfo_merged.csv")
minuteSleep_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteSleep_merged.csv")
minuteStepsNarrow_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteStepsNarrow_merged.csv")
minuteIntensitiesWide_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteIntensitiesWide_merged.csv")
minuteMETsNarrow_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteMETsNarrow_merged.csv")
minuteCaloriesWide_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteCaloriesWide_merged.csv")
minuteIntensitiesNarrow_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteIntensitiesNarrow_merged.csv")
hourlyCalories_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/hourlyCalories_merged.csv")
hourlyIntensities_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/hourlyIntensities_merged.csv")
hourlySteps_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/hourlySteps_merged.csv")
minuteCaloriesNarrow_merged <- read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/minuteCaloriesNarrow_merged.csv")
dailyActivity_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/dailyActivity_merged.csv")
dailyCalories_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/dailyCalories_merged.csv")
dailyIntensities_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/dailyIntensities_merged.csv")
dailySteps_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/dailySteps_merged.csv")
heartrate_seconds_merged <-read_csv("C:/Users/Yuri/Documents/capstone project/fitbit_fitnesstrack_data/heartrate_seconds_merged.csv")

#CHECANDO OS DADOS

colnames(dailyactivity_merged)
head(dailyactivity_merged)
str(dailyactivity_merged)
nrow(dailyactivity_merged)

colnames(sleepDay_merged)
head(sleepDay_merged)
str (sleepDay_merged)
nrow(sleepDay_merged)


str(dailyactivity_merged)
str(dailyIntensities_merged)
str(dailyCalories_merged)
str(weightLogInfo_merged)
str(dailyCalories_merged)

#...REPETIR A CHECAGEM DOS DADOS PARA TODAS OUTRAS TABELAS QUE FOREM NECESSARIO.


#Ambas tabelas abaixo possuem uma quantidade de registros muito inferior aos registros das outras tabelas diarias
nrow(weightLogInfo_merged)
nrow(sleepDay_merged)

n_distinct(weightLogInfo_merged$Id)
n_distinct(sleepDay_merged$Id)


teste <- sqldf ('SELECT DISTINCT Id FROM "weightLogInfo_merged"')
nrow(teste)


teste0 <- sqldf ('SELECT DISTINCT Id FROM "sleepDay_merged"')
nrow(teste0)

#A tabela referente a peso, e indices de massa corporal ('weightLogInfo_merged'), e a tabela referente ao sono diario ('sleepDay_merged'),
#se apresentam incompletas, com menos registros que as demais, portanto nao vamos considera-la na analise dos dados.

#Vamos tomar como referencia as tabelas de dados diários acumulados ('daily...'), pois representa melhor o estudo a ser tomado devido à quantidade de dados informada.


#Limpeza dos dados

#Apos analise inicial dos dados contidos na tabela 'dailyactivity_merges', foram observadas colunas de mesmo atributo que as tabelas:
#('dailyCalories_merged' , 'dailyIntensities_merged', 'dailySteps_merged', e 'sleepDay_merged')

#Vamos verificar se a tabela de atividade diaria('dailyactivity_merges') possui o mesmo numero de registros 
#das outras tabelas diarias ('dailyCalories_merged' , 'dailyIntensities_merged', 'dailySteps_merged', e 'sleepDay_merged'),
#para confirmar a hipotese de que as colunas de mesmo atributo possuem dados correspondentes às outras tabelas(dados iguais). 

#Para isso, iremos criar data frames ('daily_activity...') da 'dailyactivity_merges', incluindo apenas as colunas de correspondencia das tabelas em questao.

#check1 é a nova tabela, que consiste da intercessão entre o data frame (daily_activity...) criado e a outra tabela em questao.('daily...')
#O SELECT foi utilizado apenas nas colunas que serao utilizadas para a verificação cruzada.(As mesmas colunas da tabela que sera feita a checagem)

#Data frame da 'dailyActivity_merged' ∩ 'dailyCalories_merged'
daily_activity1 <- dailyactivity_merged %>% select(Id, ActivityDate, Calories)
check1 <- sqldf ('SELECT * FROM daily_activity1 INTERSECT SELECT * FROM dailyCalories_merged')
nrow(daily_activity1)
head (daily_activity1)
nrow(check1)
head (check1)

#Data frame da 'dailyActivity_merged' ∩ 'dailyIntensities_merged'
daily_activity2 <- dailyactivity_merged %>% select(Id, ActivityDate, SedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes, SedentaryActiveDistance, LightActiveDistance, ModeratelyActiveDistance, VeryActiveDistance)
check2 <- sqldf('SELECT * FROM daily_activity2 INTERSECT SELECT * FROM dailyIntensities_merged')
nrow(daily_activity2)
head (daily_activity2)
nrow(check2)
head (check2)

#Data frame da 'dailyActivity_merged' ∩ 'dailySteps_merged'
daily_activity3 <- dailyactivity_merged %>%  select(Id, ActivityDate, TotalSteps)
check3 <- sqldf('SELECT * FROM daily_activity3 INTERSECT SELECT * FROM dailySteps_merged')
nrow(daily_activity3)
head (daily_activity3)
nrow(check3)
head (check3)

#as 940 linhas encontradas em suas interseções (check1, check2, e check3), evidenciam que suas referencias sao devidamente correspondentes(dados iguais).


#Checando o numero de linhas, e o numero de Ids diferentes
nrow(check1)
head(check1)
str(check1)

nrow(check2)
head(check2)
str(check2)

nrow(check3)
head(check3)
str(check3)

#Criação dos visuais e Análise dos dados
#Sendo confirmado que a tabela dailyactivity_merged é a consolidação das outras tabelas de resumos diario, vamos utiliza-la como uma fonte confiável para nossa analise.
#Vamos tomar como referência a queima de calorias, e o associando com outros atributos para obtermos correlações.


ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=TotalSteps, y=Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=TotalDistance, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=LightActiveDistance, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=ModeratelyActiveDistance, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=SedentaryActiveDistance, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveDistance, y= Calories ))


ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=SedentaryMinutes, y= Calories )) 
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=LightlyActiveMinutes, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=FairlyActiveMinutes, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveMinutes, y= Calories ))

ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=SedentaryMinutes, y= Calories )) + geom_smooth(mapping = aes (x=SedentaryMinutes, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=LightlyActiveMinutes, y= Calories )) + geom_smooth(mapping = aes (x=LightlyActiveMinutes, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=FairlyActiveMinutes, y= Calories )) + geom_smooth(mapping = aes (x=FairlyActiveMinutes, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveMinutes, y= Calories )) + geom_smooth(mapping = aes (x=VeryActiveMinutes, y= Calories ))

merge_1 <- merge(dailyActivity_merged, dailyCalories_merged, by = c("Id","Calories"))
nrow(merge_1)

#VERIFICANDO INTEGRIDADE DOS DADOS, E O NUMERO DE IDS POR TABELA
teste1 <- sqldf ('SELECT DISTINCT Id FROM "dailyCalories_merged"')
nrow(teste1)

teste2 <- sqldf ('SELECT DISTINCT Id FROM "dailyactivity_merged"')
nrow(teste2)

teste3 <- sqldf ('SELECT DISTINCT Id FROM "dailyIntensities_merged"')
nrow(teste3)

teste4 <- sqldf ('SELECT DISTINCT Id FROM "dailySteps_merged"')
nrow(teste4)

#Ambas abaixo foram excludias da analise devido ao numero inferior de lunas, e registros de Id.

teste5 <- sqldf ('SELECT DISTINCT Id FROM "sleepDay_merged"')
nrow(teste5)

teste6 <- sqldf ('SELECT DISTINCT Id FROM "weightLogInfo_merged"')
nrow(teste6)



#Agora faremos uma relação mais detalhada da queima de calorias relacionada ao tipo de atividade diaria, Comparando o gasto calorico com a soma total das distancias percorridas, e os minutos em atividade.
#Em seguida faremos um outro comparativo, comparando o gasto calorico com os distancia percorrida com atividade sedentaria, e tambem com o tempo sedentario.


daily_activity4 <- sqldf ('SELECT Id, ActivityDate,Calories, TotalSteps, TotalDistance, TrackerDistance, LoggedActivitiesDistance, (VeryActiveDistance+ModeratelyActiveDistance+LightActiveDistance) AS ActiveDistanceTotal,SedentaryActiveDistance, (VeryActiveMinutes+FairlyActiveMinutes+LightlyActiveMinutes) AS ActiveMinutesTotal, SedentaryMinutes FROM "dailyactivity_merged"')

colnames(daily_activity4)
nrow(daily_activity4)

ggplot(data=daily_activity4) + geom_point(mapping = aes (x=ActiveMinutesTotal, y=Calories ))
ggplot(data=daily_activity4) + geom_point(mapping = aes (x=ActiveDistanceTotal, y=Calories ))
ggplot(data=daily_activity4) + geom_point(mapping = aes (x=ActiveMinutesTotal, y=Calories )) + geom_smooth(mapping = aes (x=ActiveMinutesTotal, y= Calories ))
ggplot(data=daily_activity4) + geom_point(mapping = aes (x=ActiveDistanceTotal, y=Calories )) + geom_smooth(mapping = aes (x=ActiveDistanceTotal, y= Calories ))


ggplot(data=daily_activity4) + geom_point(mapping = aes (x=SedentaryMinutes, y=Calories ))
ggplot(data=daily_activity4) + geom_point(mapping = aes (x=SedentaryActiveDistance, y=Calories ))
ggplot(data=daily_activity4) + geom_point(mapping = aes (x=SedentaryMinutes, y=Calories )) + geom_smooth(mapping = aes (x=SedentaryMinutes, y= Calories ))
ggplot(data=daily_activity4) + geom_point(mapping = aes (x=SedentaryActiveDistance, y=Calories )) + geom_smooth(mapping = aes (x=SedentaryActiveDistance, y= Calories ))

ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveMinutes, y=Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveDistance, y=Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveMinutes, y=Calories )) + geom_smooth(mapping = aes (x=VeryActiveMinutes, y= Calories ))
ggplot(data=dailyactivity_merged) + geom_point(mapping = aes (x=VeryActiveDistance, y=Calories )) + geom_smooth(mapping = aes (x=VeryActiveDistance, y= Calories ))


#Combinando a tabela de sleep day

#Utilizando o group by
teste8<-dailyActivity_merged %>%  group_by(Id) %>%  drop_na() %>%  summarize ( mediaTotalSteps= mean(TotalSteps), maxTotalSteps = max(TotalSteps))
teste9<-sleepDay_merged %>%  group_by(Id) %>%  drop_na() %>%  summarize ( mediaTotalSleep= mean(TotalMinutesAsleep), maxTotalSleep = max(TotalMinutesAsleep))
teste10 <-sleepDay_merged %>%  group_by(Id) %>%  drop_na() %>%  summarize ( somaTotalSleep = sum(TotalMinutesAsleep), mediaTotalSleep= mean(TotalMinutesAsleep), maxTotalSleep = max(TotalMinutesAsleep))

merge_1 <- merge(teste8, teste9, by = c("Id"))
nrow(merge_1)
ggplot(data=merge_1) + geom_point(mapping = aes (x=mediaTotalSleep, y=mediaTotalSteps ))
ggplot(data=merge_1) + geom_point(mapping = aes (x=maxTotalSleep, y=maxTotalSteps ))

combined_sleep_day_data <- merge(sleepDay_merged, dailyActivity_merged, by="Id")
nrow(combined_sleep_day_data)
head(combined_sleep_day_data)
n_distinct(combined_sleep_day_data$Id)
combined_sleep_day_data2 <- merge(sleepDay_merged, dailyActivity_merged, by="Id", all = TRUE)
n_distinct(combined_sleep_day_data2$Id)
ggplot(data= combined_sleep_day_data ) + geom_point(mapping = aes (x=SedentaryMinutes, y=TotalMinutesAsleep ))


ggplot(data=dailyactivity_merged) + geom_bar(mapping = aes(x=SedentaryMinutes))
